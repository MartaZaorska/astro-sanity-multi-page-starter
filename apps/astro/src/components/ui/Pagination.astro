---
type Props = {
  totalPages: number;
  currentPage: number;
  slugPrefix: string;
};

const { totalPages, currentPage, slugPrefix } = Astro.props;

const getSlug = (num?: number) => (num && num > 1 ? `${slugPrefix}/strona/${num}#listing` : `${slugPrefix}#listing`);

const renderPaginationItem = (i: number) =>
  `<a href="${getSlug(i)}" ${currentPage === i ? 'aria-current="page"' : ''} aria-label="Przejdź do strony ${i}">${i}</a>`;

const renderPagination = () => {
  const pagination = [];

  if (totalPages <= 7) {
    for (let i = 1; i <= totalPages; i++) pagination.push(renderPaginationItem(i));
    return pagination.join('');
  }

  if (currentPage <= 4) {
    for (let i = 1; i <= Math.max(currentPage + 1, 3); i++) pagination.push(renderPaginationItem(i));
    pagination.push('<span>...</span>');
    pagination.push(renderPaginationItem(totalPages));
  } else if (currentPage > 4 && totalPages - currentPage >= 4) {
    pagination.push(renderPaginationItem(1));
    pagination.push('<span>...</span>');
    for (let i = currentPage - 1; i <= currentPage + 1; i++) pagination.push(renderPaginationItem(i));
    pagination.push('<span>...</span>');
    pagination.push(renderPaginationItem(totalPages));
  } else if (totalPages - currentPage < 4) {
    pagination.push(renderPaginationItem(1));
    pagination.push('<span>...</span>');
    for (let i = Math.min(currentPage - 1, totalPages - 2); i <= totalPages; i++)
      pagination.push(renderPaginationItem(i));
  }

  return pagination.join('');
};
---

<nav
  class='Pagination'
  aria-label='Paginacja postów na blogu'
>
  {
    currentPage > 1 && (
      <a
        href={getSlug(currentPage - 1)}
        rel='prev'
        aria-label='Przejdź do strony poprzedniej'
      >
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='16'
          height='16'
          fill='none'
          viewBox='0 0 16 16'
        >
          <path
            stroke='#121212'
            stroke-linecap='round'
            stroke-linejoin='round'
            d='M10 3.333 6 8l4 4.667'
          />
        </svg>
      </a>
    )
  }
  <Fragment set:html={renderPagination()} />
  {
    currentPage < totalPages && (
      <a
        href={getSlug(currentPage + 1)}
        rel='next'
        aria-label='Przejdź do strony następnej'
      >
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='16'
          height='16'
          fill='none'
          viewBox='0 0 16 16'
        >
          <path
            stroke='#121212'
            stroke-linecap='round'
            stroke-linejoin='round'
            d='M6 3.333 10 8l-4 4.667'
          />
        </svg>
      </a>
    )
  }
</nav>
<style lang='scss'>
  .Pagination {
    margin-top: 4rem;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;

    :global(a) {
      width: 44px;
      height: 44px;
      border: 1px solid var(--neutral-600);
      border-radius: 50%;
      display: grid;
      place-items: center;
      background-color: var(--neutral-100);
      color: var(--neutral-600);
      transition: background-color 150ms, opacity 200ms;

      &:hover {
        background-color: var(--neutral-200);
      }

      &[aria-current='page'] {
        background-color: var(--primary-500);
        color: var(--neutral-100);
        border-color: var(--primary-500);
        opacity: 0.9;
        &:hover {
          opacity: 1;
        }
      }
    }
  }
</style>
