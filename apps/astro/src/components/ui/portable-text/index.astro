---
import type { HTMLAttributes } from 'astro/types';
import { PortableText } from 'astro-portabletext';
import type { PortableTextProps } from 'astro-portabletext/types';
import Mark from './Mark.astro';
import Block from './Block.astro';

export type PortableTextValue = PortableTextProps['value'];

type HeadingTag = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';

type Props = (
  | {
      heading: HeadingTag;
      wrapperTag?: never;
      tag?: never;
    }
  | {
      heading?: never;
      wrapperTag?: 'div' | 'article';
      tag?: 'span' | 'p';
    }
) & { value: PortableTextValue } & HTMLAttributes<'div' | 'article' | 'span' | 'p' | HeadingTag>;

const { heading: Heading, wrapperTag, tag, value, ...props } = Astro.props;

const valueArray = Array.isArray(value) ? value : [value];
const isOneElement = valueArray.length === 1;
const WrapperTag = wrapperTag ?? (isOneElement ? '' : 'div');
const Tag = tag ?? 'p';
---

{
  Heading ? (
    <Heading {...props}>
      {valueArray.map((value: PortableTextValue) =>
        !isOneElement ? (
          <span>
            <PortableText
              value={value}
              components={{ block: Block, mark: Mark }}
            />
          </span>
        ) : (
          <PortableText
            value={value}
            components={{ block: Block, mark: Mark }}
          />
        )
      )}
    </Heading>
  ) : !isOneElement ? (
    <WrapperTag {...props}>
      <PortableText
        value={valueArray}
        components={{ mark: Mark }}
      />
    </WrapperTag>
  ) : WrapperTag ? (
    <WrapperTag {...props}>
      <Tag>
        <PortableText
          value={valueArray}
          components={{ mark: Mark, block: Block }}
        />
      </Tag>
    </WrapperTag>
  ) : (
    <Tag {...props}>
      <PortableText
        value={valueArray}
        components={{ mark: Mark, block: Block }}
      />
    </Tag>
  )
}
