---
import sanityFetch from '@/utils/sanity.fetch';
import icon from '@/assets/icon.png';

const days = {
  weekdays: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
  saturday: 'Saturday',
  sunday: 'Sunday',
};

const { email, tel, socials, openHours, address, googleData, organizationSchema } = await sanityFetch<{
  email: string;
  tel?: string;
  socials?: { facebook?: string; instagram?: string; linkedin?: string; tiktok?: string };
  openHours?: {
    weekdays?: { from: string; to: string };
    saturday?: { from: string; to: string };
    sunday?: { from: string; to: string };
  };
  address?: { street: string; city: string; postalCode: string; country: string; mapLink: string };
  googleData?: { rating: number; user_ratings_total: number };
  organizationSchema: {
    name: string;
    description: string;
    businessDetails?: {
      vatID?: string;
      regon?: string;
      legalName?: string;
      foundingDate?: string;
      founder?: string;
      priceRange?: number;
    };
  };
}>({
  query: `
    *[_type == "global"][0] {
      email,
      tel,
      openHours,
      address,
      googleData,
      organizationSchema,
      "socials": *[_type == "socials"][0]{
        linkedin,
        facebook,
        instagram,
        tiktok
      }
    }
  `,
});

const schema = {
  '@context': 'https://schema.org',
  '@type': 'Organization',
  '@id': `${Astro.url.origin}/#organization`,
  name: organizationSchema.name,
  description: organizationSchema.description,
  url: Astro.url.origin,
  email,
  ...(tel && { telephone: tel }),
  sameAs: [socials?.facebook, socials?.instagram, socials?.linkedin, socials?.tiktok].filter(Boolean),
  image: [
    {
      '@type': 'ImageObject',
      url: icon.src,
      width: '512',
      height: '512',
    },
  ],
  logo: {
    '@type': 'ImageObject',
    url: icon.src,
    width: '512',
    height: '512',
    caption: organizationSchema.name,
  },
  ...(openHours && {
    openingHoursSpecification: Object.entries(openHours)
      .filter(([, value]) => value?.from && value?.to)
      .map(([key, value]) => ({
        '@type': 'OpeningHoursSpecification',
        dayOfWeek: days[key as keyof typeof days],
        opens: value.from,
        closes: value.to,
        ...(organizationSchema.businessDetails?.foundingDate
          ? { validFrom: organizationSchema.businessDetails.foundingDate }
          : {}),
      })),
  }),
  ...(address && {
    address: {
      '@type': 'PostalAddress',
      streetAddress: address.street,
      addressLocality: address.city,
      postalCode: address.postalCode,
      addressCountry: address.country,
    },
  }),
  ...(googleData && {
    aggregateRating: {
      '@type': 'AggregateRating',
      ratingValue: googleData.rating,
      ratingCount: googleData.user_ratings_total,
      bestRating: '5',
      worstRating: '1',
    },
  }),
  contactPoint: {
    '@type': 'ContactPoint',
    contactType: 'customer service',
    email,
    ...(tel && { telephone: tel }),
    availableLanguage: ['pl'],
  },
  ...(organizationSchema.businessDetails?.foundingDate && {
    foundingDate: organizationSchema.businessDetails.foundingDate,
  }),
  //isicV4: '',
  ...(organizationSchema.businessDetails?.vatID && {
    vatID: organizationSchema.businessDetails.vatID,
    taxID: organizationSchema.businessDetails.vatID,
  }),
  ...(organizationSchema.businessDetails?.regon && { iso6523Code: `0191:${organizationSchema.businessDetails.regon}` }),
  ...(organizationSchema.businessDetails?.legalName && { legalName: organizationSchema.businessDetails.legalName }),
  ...(organizationSchema.businessDetails?.founder && {
    founder: {
      '@type': 'Person',
      name: organizationSchema.businessDetails.founder,
    },
  }),
  areaServed: {
    '@type': 'Place',
    address: {
      '@type': 'PostalAddress',
      addressCountry: 'PL',
    },
  },
};
---

<script
  is:inline
  type='application/ld+json'
  set:html={JSON.stringify(schema)}
/>
